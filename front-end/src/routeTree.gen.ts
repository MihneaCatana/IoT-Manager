/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SpacesImport } from './routes/spaces'
import { Route as RegisterImport } from './routes/register'
import { Route as DevicesImport } from './routes/devices'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as BillingImport } from './routes/billing'
import { Route as AccountImport } from './routes/account'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const SpacesRoute = SpacesImport.update({
  id: '/spaces',
  path: '/spaces',
  getParentRoute: () => rootRoute,
} as any)

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const DevicesRoute = DevicesImport.update({
  id: '/devices',
  path: '/devices',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const BillingRoute = BillingImport.update({
  id: '/billing',
  path: '/billing',
  getParentRoute: () => rootRoute,
} as any)

const AccountRoute = AccountImport.update({
  id: '/account',
  path: '/account',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/account': {
      id: '/account'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof AccountImport
      parentRoute: typeof rootRoute
    }
    '/billing': {
      id: '/billing'
      path: '/billing'
      fullPath: '/billing'
      preLoaderRoute: typeof BillingImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/devices': {
      id: '/devices'
      path: '/devices'
      fullPath: '/devices'
      preLoaderRoute: typeof DevicesImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/spaces': {
      id: '/spaces'
      path: '/spaces'
      fullPath: '/spaces'
      preLoaderRoute: typeof SpacesImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/account': typeof AccountRoute
  '/billing': typeof BillingRoute
  '/dashboard': typeof DashboardRoute
  '/devices': typeof DevicesRoute
  '/register': typeof RegisterRoute
  '/spaces': typeof SpacesRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/account': typeof AccountRoute
  '/billing': typeof BillingRoute
  '/dashboard': typeof DashboardRoute
  '/devices': typeof DevicesRoute
  '/register': typeof RegisterRoute
  '/spaces': typeof SpacesRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/account': typeof AccountRoute
  '/billing': typeof BillingRoute
  '/dashboard': typeof DashboardRoute
  '/devices': typeof DevicesRoute
  '/register': typeof RegisterRoute
  '/spaces': typeof SpacesRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/account'
    | '/billing'
    | '/dashboard'
    | '/devices'
    | '/register'
    | '/spaces'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/account'
    | '/billing'
    | '/dashboard'
    | '/devices'
    | '/register'
    | '/spaces'
  id:
    | '__root__'
    | '/'
    | '/account'
    | '/billing'
    | '/dashboard'
    | '/devices'
    | '/register'
    | '/spaces'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AccountRoute: typeof AccountRoute
  BillingRoute: typeof BillingRoute
  DashboardRoute: typeof DashboardRoute
  DevicesRoute: typeof DevicesRoute
  RegisterRoute: typeof RegisterRoute
  SpacesRoute: typeof SpacesRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AccountRoute: AccountRoute,
  BillingRoute: BillingRoute,
  DashboardRoute: DashboardRoute,
  DevicesRoute: DevicesRoute,
  RegisterRoute: RegisterRoute,
  SpacesRoute: SpacesRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/account",
        "/billing",
        "/dashboard",
        "/devices",
        "/register",
        "/spaces"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/account": {
      "filePath": "account.tsx"
    },
    "/billing": {
      "filePath": "billing.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx"
    },
    "/devices": {
      "filePath": "devices.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/spaces": {
      "filePath": "spaces.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
